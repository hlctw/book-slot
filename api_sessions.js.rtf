{\rtf1\ansi\ansicpg950\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset136 PingFangTC-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import \{ supabase \} from '../lib/supabase';\
\
// 
\f1 \'b8\'73\'b2\'d5\'a4\'c6\'ac\'db\'a6\'50\'bd\'d2\'b5\'7b
\f0 \
function groupSimilarSessions(sessions) \{\
  const grouped = \{\};\
  const result = [];\
  \
  sessions.forEach(session => \{\
    const groupKey = `$\{session.organizer\}-$\{session.book_title\}-$\{session.start_time\}-$\{session.end_time\}-$\{session.zoom_id\}-$\{session.repeat_type\}`;\
    \
    if (!grouped[groupKey]) \{\
      grouped[groupKey] = \{\
        ...session,\
        dates: [session.start_date],\
        courseStartDate: session.start_date,\
        courseEndDate: session.end_date,\
        isGrouped: false\
      \};\
    \} else \{\
      grouped[groupKey].dates.push(session.start_date);\
      if (session.start_date < grouped[groupKey].courseStartDate) \{\
        grouped[groupKey].courseStartDate = session.start_date;\
      \}\
      if (session.end_date > grouped[groupKey].courseEndDate) \{\
        grouped[groupKey].courseEndDate = session.end_date;\
      \}\
      grouped[groupKey].isGrouped = true;\
    \}\
  \});\
  \
  Object.values(grouped).forEach(group => \{\
    if (group.dates.length > 1) \{\
      group.dates.sort();\
      group.isGrouped = true;\
    \}\
    result.push(group);\
  \});\
  \
  return result;\
\}\
\
export default async function handler(req, res) \{\
  if (req.method === 'GET') \{\
    try \{\
      let query = supabase\
        .from('sessions')\
        .select('*')\
        .eq('status', 'open')\
        .order('start_date', \{ ascending: true \});\
\
      const \{ date, q \} = req.query;\
      \
      if (date) \{\
        query = query.gte('start_date', date).lt('start_date', date + 'T23:59:59');\
      \}\
      \
      if (q && q.trim()) \{\
        const searchTerm = `%$\{q.trim()\}%`;\
        query = query.or(`title.ilike.$\{searchTerm\},book_title.ilike.$\{searchTerm\},organizer.ilike.$\{searchTerm\}`);\
      \}\
\
      const \{ data, error \} = await query;\
      \
      if (error) \{\
        console.error('Supabase error:', error);\
        return res.status(400).json(\{ error: error.message \});\
      \}\
\
      // 
\f1 \'b8\'73\'b2\'d5\'a4\'c6\'ac\'db\'a6\'50\'bd\'d2\'b5\'7b
\f0 \
      const groupedSessions = groupSimilarSessions(data || []);\
      \
      res.status(200).json(groupedSessions);\
    \} catch (error) \{\
      console.error('API error:', error);\
      res.status(500).json(\{ error: '
\f1 \'a6\'f8\'aa\'41\'be\'b9\'bf\'f9\'bb\'7e
\f0 ' \});\
    \}\
  \} else \{\
    res.setHeader('Allow', ['GET']);\
    res.status(405).json(\{ error: '
\f1 \'a4\'a3\'a4\'e4\'b4\'a9\'a6\'b9\'a4\'e8\'aa\'6b
\f0 ' \});\
  \}\
\}\
}